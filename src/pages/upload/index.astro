---
import { uploadImage } from "../../utils/cloudinary";
const dev = import.meta.env.DEV;

if (Astro.request.method === 'POST') {
	const formData = await Astro.request.formData();
	const files = formData.getAll('file') as File[];
	for (const file of files) {
		const buffer = await file.arrayBuffer();
		const base64Str = Buffer.from(buffer).toString('base64');
		console.log();
		const uintarr = new Uint8Array(await file.arrayBuffer());
		const str = new TextDecoder().decode(uintarr);
		// console.log(base64Str)
		try {
			await uploadImage(str);
		} catch (e) {
			console.log(e)
		}
	}
	// console.log(await uploadImage(formData));
}


---

<form method="post" enctype="multipart/form-data">
	<input type="file" name="file" multiple />
	<input type='text' name='text' />
	<button type="submit">Submit</button>
</form>





<script>
	const signData = await (await fetch('/api/cloudinary')).json();
	console.log(signData);
	const url = "https://api.cloudinary.com/v1_1/" + signData.cloudname + "/auto/upload";

	const form = document.querySelector("form")!;

	form.addEventListener("submit", (e) => {
		e.preventDefault();

		const files = (document.querySelector("[type=file]") as HTMLInputElement)!.files!;
		const formData = new FormData();

		// Append parameters to the form data. The parameters that are signed using 
		// the signing function (signuploadform) need to match these.
		for (const file of files) {
			formData.append("file", file);
			formData.append("api_key", signData.apikey);
			formData.append("timestamp", signData.timestamp);
			formData.append("signature", signData.signature);
			formData.append("eager", "c_pad,h_300,w_400|c_crop,h_200,w_260");
			formData.append("folder", signData.folder);
			fetch(url, {
				method: "POST",
				body: formData
			})
				.then((response) => {
					return response.text();
				})
				.then((data) => {
					console.log(JSON.parse(data))
				});
		}
	});

	// import { fileToBase64 } from '../utils/utils';
	// const form = document.querySelector('form')!;
	// form.addEventListener('submit', async e => {
	// 	e.preventDefault();
	// 	const files = (form.querySelector('input[type="file"') as HTMLInputElement)!.files || [];
	// 	const newFormData = new FormData();
	// 	for (const f of files) {
	// 		const base64 = await fileToBase64(f);
	// 		newFormData.append('file', base64);
	// 	}
	// 	// const formData = new FormData(form);
	// 	// const file = formData.get('file') as File | null;
	// 	// if (file) {
	// 	// 	// convert file to base64 and send to server
	// 	// 	try {
	// 	// 		const base64 = await fileToBase64(file);
	// 	// 		fetch(window.location.href, {
	// 	// 			method: 'POST',
	// 	// 			body: base64,
	// 	// 			headers: {
	// 	// 				'Content-Type': 'multipart/form-data'
	// 	// 			}
	// 	// 		})
	// 	// 	} catch (error) {
	// 	// 		console.error(error);
	// 	// 	}
	// 	// };
	// 	try {
	// 		const res = await fetch(window.location.href, {
	// 			method: 'POST',
	// 			body: newFormData,
	// 			headers: {
	// 				'Content-Type': 'multipart/form-data'
	// 			}
	// 		});
	// 	} catch (e) {
	// 		console.error(e);
	// 	}
	// });
</script>